import path from 'path';
import chalk from 'chalk';
import logger from './logger.js';

// Generate runtime helper that finds and parses a component instance's prop data
export function generateGetProps() {
  return (
`
function getProps(cayoElement) {
  const json = cayoElement.dataset.cayoProps;
  return JSON.parse(json);
}
`
  );
}

// Generate the Cayo Runtime which is unique per page to render the cayos on the page
export function generateCayoRuntime(components, fileName, _cayo) {
  const { config, __VERSION__ } = _cayo;
  let code = '';
  let instances = '';
  // Add banner
  code += `/* ${fileName} generated by Cayo v${__VERSION__} */\n`;
  
  if (Object.keys(components).length !== 0) {
    // TODO: add this path to config (internal only)
    const componentPathBase = path.resolve(config.cayoPath, './__cayo/components');
    Object.entries(components).forEach(([name, ids]) => {
      // Add component dependency import
      code += `import ${name} from '${componentPathBase}/${name}.svelte.js';\n`;
      // Generate component instances
      ids.forEach(id => {
        instances += generateComponentInstance(id, name)
      });
    });
    
    // Add getProps (used by component instances)
    code += generateGetProps();
  } else {
    instances += `  // No cayo component instances found in page HTML`;
  }

  // Add main render, which runs the component instantiations
  code += generateRender(instances);

  return { code };
}

function generateRender(contents) {
  return (
`
export default function render(cb) {
  var target = cb ? cb : (node) => node;
  let cayos = {};
${contents}
  return cayos;
}
`
  );
}

// Generate the code to wrap component instances in an event listener wrapper
export function generateComponentInstanceWrapper(contents) {
  return (
`
document.addEventListener('DOMContentLoaded', function() {
${contents}
});
`
  );
}

// Generate the code for a component instance
export function generateComponentInstance(cayoId, componentName) {
  return (
` 
  cayos['${cayoId}'] = {};
  cayos['${cayoId}'].target = document.querySelector('[data-cayo-id="${cayoId}"]');
  cayos['${cayoId}'].instance = new ${componentName}({
    target: target(cayos['${cayoId}'].target),
    hydrate: true,
    props: getProps(cayos['${cayoId}'].target),
  });
`
  );
}

// Generate the code to import the the generated Cayo Runtime file
export function generateCayoRuntimeImport() {
  return `import { default as renderCayos } from './cayo-runtime.js';\n`
}

// TODO: add links to relevant docs
// Generate console warnings that need to show in the browser
export function generateRuntimeIssuesScript(runtime, issues, type) {
  const { config, document, page } = runtime;
  const script = document.createElement('script');

  // Formattign and label stuff
  let prefix = 'Warning';
  let f_log = (str) => str;
  let f_prefix = prefix
  let consoleType = 'log';
  if (type === 'warning') {
    prefix = 'Warning';
    f_log = chalk.yellow;
    f_prefix = chalk.yellow.bold(prefix);
    consoleType = 'warn';
  } else if (type === 'error') {
    prefix = 'Error';
    f_log = chalk.redBright;
    f_prefix = chalk.redBright.bold(prefix);
    consoleType = 'error';
  }
  
  const { 
    cayos: cayoIssues, 
    page: pageIssues,
  } = issues;

  script.innerHTML = `/* ${prefix}s for this page. See issues in console. */\n`;

  // Handle issues derived during initial compilation of the cayo instance
  if (Object.keys(cayoIssues).length > 0) {
    for (const cayoId in cayoIssues) {
      let message = `Cayo ${prefix}: Cayo '${cayoId}' has runtime issues.\n\n`;
      for (const key in cayoIssues[cayoId]) {
        const issue = cayoIssues[cayoId][key];
        message += `${issue.title}: ${issue.message}\n\n`;
        if (cayoId !== 'undefined') {
          message += `Hint: review instances of <Cayo src="${issue.src}"> intended to be rendered on page '${page.sourcePath.replace(config.pages, '')}'\n`;
        } else {
          message += `Hint: review instances of <Cayo src={<undefined>}> or <Cayo> without a src prop intended to be rendered on page '${page.sourcePath.replace(config.pages, '')}'\n`;
        }
        if (issue.log) {
          logger.log.info(
            `${f_log(`${f_prefix}: ${issue.log}`)} ${chalk.dim(`${page.name}`)}`, 
            { timestamp: true, clear: false, }
          );
        }
      }
      script.innerHTML += `console.${consoleType}(\`${message}\`);\n`;
    }
  }
  // Handle issues derived from parsing the rendered HTML page
  if (Object.keys(pageIssues).length > 0) {
    for (const key in pageIssues) {
      const issue = pageIssues[key];
      let message = `${prefix}: page '${page.name}' has runtime issues.\n\n`;
      message += `${issue.title}: ${issue.message}\n\n`;
      script.innerHTML += `console.${consoleType}(\`${message}\`);\n`;
      if (issue.log) {
        logger.log.info(
          `${f_log(`${f_prefix}: ${issue.log}`)} ${chalk.dim(`${page.name}`)}`, 
          { timestamp: true, clear: false, }
        );
      }
    }
  }

  return script;
}